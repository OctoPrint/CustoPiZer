name: "Build container image"

on:
  push:
    branches:
      - main
    tags:
      - "*"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}

env:
  IMAGE_NAME: custopizer
  ARTIFACT_NAME: custopizer-docker-image
  REGISTRY_NAME: ghcr.io/octoprint/custopizer

jobs:
  build:
    name: "🏗 Build"

    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.meta.outputs.tags[0] }}

    steps:
    - name: "⬇ Checkout"
      uses: actions/checkout@v4

    - name: "🐳 Login to GHCR"
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🔍️ Determine metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
  
    - name: "🐳 Set up Docker Buildx"
      uses: docker/setup-buildx-action@v3

    - name: "🏗 Build & export"
      id: docker_build
      uses: docker/build-push-action@v6
      with:
        context: ./src
        platforms: linux/amd64,linux/arm64

        # metadata
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

        # inline cache
        cache-from: type=registry,ref=${{ steps.meta.outputs.tags[0] }}
        cache-to: type=inline

        # export
        outputs: type=docker,dest=${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar

    - name: "⬆️ Upload artifact"
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar


  test:
    name: "🧪 Test"
    needs: build
    runs-on: "ubuntu-latest"

    steps:
      - name: "⬇️ Download artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ runner.temp }}
      
      - name: "🐳 Load image into Docker"
        run:
          docker load --input ${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar
          docker image ls -a

      - name: Dummy test
        run: |
          echo "A test will run here"

  deploy:
    name: "📦 Deploy"
    needs: 
    - build
    - test
    runs-on: "ubuntu-latest"

    if: github.event_name != 'pull_request'

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: "🐳 Login to GHCR"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: "⬇️ Download artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ runner.temp }}
      
      - name: "🐳 Load image into Docker"
        run: |
          docker load --input ${{ runner.temp }}/${{ env.IMAGE_NAME }}.tar
          docker image ls -a

      - name: "📦️ Push image into registry"
        run: |
          IMAGE_TAG="${{ needs.build.outputs.tag }}"
          docker push $IMAGE_TAG
