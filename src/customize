#!/usr/bin/env bash
# OS customization script
# This script takes an OS image and runs customization scripts on it
# Written by Gina Haeussge <gina at octoprint dot org>, based on work by Guy Sheffer <guy at gmail dot com>
# GPL V3
#
# Usage: customize [ <image path> [ <script path ] ]
#
# If no image path is provided, the script will assume /CustoPiZer/workspace/input.img
# If no script path is provided, the script will assume /CustoPiZer/workspace/scripts

set -e

export LC_ALL=C

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

export DIST_PATH=${DIR}
echo "DIST_PATH=$DIST_PATH"

source $DIR/config
source $DIR/common.sh

IMAGE=$1
if [ "$IMAGE" == "" ]; then
  IMAGE=$EDITBASE_WORKSPACE/input.img
fi

if [ ! -f "$IMAGE" ]; then
  echo "Error: could not find image: $IMAGE"
  exit 1
fi

CUSTOMIZE_SCRIPT_PATH=$2
if [ "$CUSTOMIZE_SCRIPT_PATH" == "" ]; then
  CUSTOMIZE_SCRIPT_PATH=$EDITBASE_WORKSPACE/scripts
fi

if [ ! -d "$CUSTOMIZE_SCRIPT_PATH" ]; then
  echo "Error: script path is not a directory: $CUSTOMIZE_SCRIPT_PATH"
  exit 1
fi

function prepare_environment() {
  # In docker, these extra commands are required to enable this black-magic
  if [ -f /.dockerenv ] && [ "$(arch)" != "armv7l" ] && [ "$(arch)" != "aarch64" ] ; then
    if [ "$EDITBASE_ARCH" == "armv7l" ]; then
      update-binfmts --enable qemu-arm
    elif [ "$EDITBASE_ARCH" == "aarch64" ] || [ "$EDITBASE_ARCH" == "arm64" ]; then
      update-binfmts --enable qemu-aarch64
    fi
    (mount | grep -q -v "type binfmt_misc") || mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc
  fi

  # black magic of qemu-arm-static
  if [ "$(arch)" != "armv7l" ] && [ "$(arch)" != "aarch64" ] ; then
    if [ "$EDITBASE_ARCH" == "armv7l" ]; then
      cp `which qemu-arm-static` usr/bin/qemu-arm-static
    elif [ "$EDITBASE_ARCH" == "aarch64" ] || [ "$EDITBASE_ARCH" == "arm64" ]; then
      cp `which qemu-aarch64-static` usr/bin/qemu-aarch64-static
    fi
  fi

  if [ "$EDITBASE_MOUNT_PROC" == "1" ]; then
    echo "Mounting /proc of host..."
    mount -t proc /proc proc/
  fi
}

function copy_files() {
  #move filesystem files
  if [ -d "$1" ]; then
    echo "::group::Copying $1"
    cp -vr --preserve=mode,timestamps "$1" .
    echo "::endgroup::"
  fi
}

function execute_chroot_script() {
  cp $1 chroot_script
  chmod 755 chroot_script
  cp "$DIR/common.sh" common.sh
  chmod 755 common.sh
  
  echo "::group::Running $1 in chroot..."

  if [ "$(arch)" != "armv7l" ] && [ "$(arch)" != "aarch64" ] && [ "$(arch)" != "arm64" ] ; then
    if [ "$EDITBASE_ARCH" == "armv7l" ]; then
      echo "Building an armv7l system on a non-ARM host, using qemu-arm-static"
      chroot . usr/bin/qemu-arm-static /bin/bash /chroot_script
    elif [ "$EDITBASE_ARCH" == "aarch64" ] || [ "$EDITBASE_ARCH" == "arm64" ]; then
      echo "Building an aarch64/arm64 system on a non-ARM host, using qemu-aarch64-static"
      chroot . usr/bin/qemu-aarch64-static /bin/bash /chroot_script
    fi
  else
    echo "Building an armv7l/aarch64/arm64 system on an ARM host, not using qemu"
    chroot . /bin/bash /chroot_script
  fi

  echo "::endgroup::"

  #cleanup
  rm chroot_script
}

function cleanup_files() {
  if [ -d "files" ]; then
    rm -rfv "files"
  fi
}

mkdir -p $EDITBASE_WORKSPACE
mkdir -p $EDITBASE_MOUNT_PATH

install_cleanup_trap
install_fail_on_error_trap
unmount_image $EDITBASE_MOUNT_PATH force || true

pushd $EDITBASE_WORKSPACE
  [ -f "output.img" ] && rm -f "output.img"

  cp $IMAGE output.img
  EDITBASE_IMG_PATH=$EDITBASE_WORKSPACE/output.img

  if [ -n "$EDITBASE_IMAGE_ENLARGEROOT" ]
  then
    # make our image a bit larger so we don't run into size problems...
    enlarge_ext $EDITBASE_IMG_PATH $EDITBASE_ROOT_PARTITION $EDITBASE_IMAGE_ENLARGEROOT
  fi

  # mount root and boot partition
  mount_image $EDITBASE_IMG_PATH $EDITBASE_ROOT_PARTITION $EDITBASE_MOUNT_PATH
  if grep -q /boot/firmware $EDITBASE_MOUNT_PATH/etc/fstab; then
    export BOOT_PATH=/boot/firmware
  else
    export BOOT_PATH=/boot
  fi

  # mount apt cache (if configured)
  if [ -n "$EDITBASE_APT_CACHE" ] && [ "$EDITBASE_APT_CACHE" != "no" ]
  then
    mkdir -p "$EDITBASE_APT_CACHE"
    mount --bind "$EDITBASE_APT_CACHE" $EDITBASE_MOUNT_PATH/var/cache/apt
  fi

  #Edit pi filesystem
  pushd $EDITBASE_MOUNT_PATH

    #make QEMU boot (remember to return)
    if [ "$EDITBASE_DISTRO" == "raspbian" ]; then
      fixLd
    fi

    prepare_environment
    
    ### Execute chroot scripts ###
    
    execute_chroot_script "$DIR/start_chroot_script"

    copy_files $CUSTOMIZE_SCRIPT_PATH/files
    for script in $(find $CUSTOMIZE_SCRIPT_PATH -maxdepth 1 -not -type d -not -path '*/\.*' -not -path '*/*\.disabled' | sort)
    do
        execute_chroot_script "$script"
    done
    cleanup_files 

    execute_chroot_script "$DIR/end_chroot_script"
    
    if [ "$EDITBASE_DISTRO" == "raspbian" ]; then
      restoreLd
    fi
  popd

  # if there are any files to export, do that now and clean up the export folder
  if [ -d "$EDITBASE_MOUNT_PATH/export" ]; then
    pushd $EDITBASE_WORKSPACE
      copy_files "$EDITBASE_MOUNT_PATH/export"
    popd
    rm -rf "$EDITBASE_MOUNT_PATH/export"
  fi
  
  # unmount first boot, then root partition
  unmount_image $EDITBASE_MOUNT_PATH
  chmod 777 $EDITBASE_IMG_PATH

  if [ -n "$EDITBASE_IMAGE_RESIZEROOT" ]
  then
    # resize image to minimal size + provided size
    minimize_ext $EDITBASE_IMG_PATH $EDITBASE_ROOT_PARTITION $EDITBASE_IMAGE_RESIZEROOT
  fi
popd

echo_green -e "\nEDIT SUCCEEDED!\n"
